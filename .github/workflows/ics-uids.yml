name: Auto-assign UID to VEVENTs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  update-uid:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm install ical.js glob

      - name: Determine which ICS files to process
        id: files
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            find . -type f -name '*.ics' > ics_files.txt
          else
            git diff --name-only HEAD^ HEAD | grep '\.ics$' > ics_files.txt || true
            # Fallback if ics_files.txt is empty (e.g. first commit)
            if ! [ -s ics_files.txt ]; then
              echo "No diffable .ics files found, defaulting to all .ics files (first commit?)"
              find . -type f -name '*.ics' > ics_files.txt
            fi
          fi
          echo "Will update these files:"
          cat ics_files.txt || echo "No .ics files to update."

      - name: Assign UIDs in selected ICS files
        run: |
          node -e '
            const fs = require("fs");
            const path = require("path");
            const ICAL = require("ical.js");
            const files = fs.readFileSync("ics_files.txt", "utf-8").split("\n").filter(f => f.trim());
            files.forEach(file => {
              if (!fs.existsSync(file)) return;
              const basename = path.basename(file, ".ics");
              let data = fs.readFileSync(file, "utf8");
              let jcal;
              try { jcal = ICAL.parse(data); } catch (e) { return; }
              const vcal = new ICAL.Component(jcal);
              // Find existing UIDs and max index
              const existingUIDs = new Set();
              let maxNum = 0;
              vcal.getAllSubcomponents("vevent").forEach(vevent => {
                const uid = vevent.getFirstPropertyValue("uid");
                if (uid && uid.startsWith(`${basename}-`)) {
                  const num = parseInt(uid.split("-")[1]);
                  if (!isNaN(num)) {
                    maxNum = Math.max(maxNum, num);
                  }
                  existingUIDs.add(uid);
                }
              });
              // Assign UIDs
              let nextNum = maxNum + 1;
              let changed = false;
              vcal.getAllSubcomponents("vevent").forEach(vevent => {
                let uid = vevent.getFirstPropertyValue("uid");
                if (!uid) {
                  let candidate;
                  do {
                    candidate = `${basename}-${String(nextNum).padStart(4, "0")}@github.com/jpwtck/ics`;
                    nextNum++;
                  } while (existingUIDs.has(candidate));
                  vevent.addPropertyWithValue("uid", candidate);
                  existingUIDs.add(candidate);
                  changed = true;
                  console.log(`‚úÖ Assigned UID: ${candidate} in ${file}`);
                }
              });
              if (changed) {
                fs.writeFileSync(file, vcal.toString(), "utf8");
                console.log(`üíæ Updated UIDs in ${file}`);
              }
            });
          '

      - name: Validate UIDs in selected ICS files
        run: |
          node -e '
            const fs = require("fs");
            const files = fs.readFileSync("ics_files.txt", "utf-8").split("\n").filter(f => f.trim());
            let failed = false;
            files.forEach(file => {
              if (!fs.existsSync(file)) return;
              let data;
              try { data = fs.readFileSync(file, "utf8"); } catch (e) { return; }
              let jcal;
              try { jcal = require("ical.js").parse(data); } catch (e) { 
                console.error(`‚ùå Error parsing ${file}: ${e.message}`); 
                failed = true; return; 
              }
              const vcal = new (require("ical.js").Component)(jcal);
              vcal.getAllSubcomponents("vevent").forEach(vevent => {
                const uid = vevent.getFirstPropertyValue("uid");
                if (!uid) {
                  console.error(`‚ùå ${file}: VEVENT missing UID`);
                  failed = true;
                }
              });
            });
            if (failed) process.exit(1);
            else console.log("‚úÖ All processed VEVENTs have UID");
          '

      - name: Create Pull Request with UID fixes
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore: auto-assign UID to new VEVENTs"
          title: "Auto-assign UID to new VEVENTs"
          body: "This PR assigns UID to all VEVENTs missing a UID for RFC compliance."
          branch: auto/update-uid-${{ github.run_id }}
          base: main
          add-paths: '*.ics'
